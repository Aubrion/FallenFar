<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

skill = -1;
initialised = false;
part_finished = false;
projectiles = false;
element_list = false;
element_final = -1;
runtime = -1; // Can hook up to this for timed events

// Init execution variables
scr_lynx_skill_object_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init when skill is provided

if (!initialised &amp;&amp; array_height_2d(skill) &gt; 0)
{
    // Call the initialize code for each of the parts
    for (var i = 0; i &lt; 4; i++)
    {
        for (var j = 0; j &lt; array_length_2d(skill, i); j++)
        {
            // Check if ID is not -1, which means empty
            var partID = skill[i,j];
            if (partID != -1)
            {
                // Execute lynx-part script and tell it to initialize
                script_execute(obj_regelaar.lynx[partID,2], true);
                
                // Set this parts status to not finished
                part_finished[i,j] = false;
            }
        }
        
        // Combine the elements
        if (i == 0) // After the elements (which are the first dimension)
            scr_lynx_skill_elements_combine();
    }
    
    // Init completed
    initialised = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase runtime counter

if (initialised)
    runtime++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute lynx-parts step code

if (initialised)
{
    var parts_done = true;
    // Run the step parts of each lynx-part script
    for (var i = 0; i &lt; 4; i++)
    {
        for (var j = 0; j &lt; array_length_2d(skill, i); j++)
        {
            var partID = skill[i,j];
            if (partID != -1 &amp;&amp; !part_finished[i,j])
            {
                script_execute(obj_regelaar.lynx[partID,2], false, i, j);
                parts_done = false;
            }
        }
    }

    // Destroy instance when no parts are running anymore
    if (parts_done)
    {
        // Check if the projectiles are still active
        var done = true;
        for (var i = 0; i &lt; array_length_1d(projectiles); i++)
        {
            if (instance_exists(projectiles[i]))
            {
                done = false;
                break;
            }
        }

        // Done executing this skill
        if (done)
            instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
