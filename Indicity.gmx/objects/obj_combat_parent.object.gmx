<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_collision_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Stats

// Base Stats (actual value, overwrite in children)
base_stat[stats.hp] = 0;
base_stat[stats.mp] = 0;
base_stat[stats.str] = 10;
base_stat[stats.def] = 0;
base_stat[stats.agi] = 0;
base_stat[stats.int] = 0;
base_stat[stats.will] = 0;
base_stat[stats.mspeed] = 0;

// Stats (curent value)
stat[stats.hp] = 0;
stat[stats.mp] = 0;
stat[stats.str] = 0;
stat[stats.def] = 0;
stat[stats.agi] = 0;
stat[stats.int] = 0;
stat[stats.will] = 0;
stat[stats.mspeed] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vars

/* Buffs 2nd demension layout:
   0 = stat (from the stat enum)
   1 = type (0 for numbers, 1 for percentages)
   2 = value
   3 = remaining time (in steps)
*/
buffs = false; // Array to store the buffs
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process buffs
var newBuffs = false;

// Init values at 0
var values = false;
for (var i = 0; i &lt; 4; i++) // 0 = posNumber, 1 = posPercent, 2 = negNumber, 3 = negPercent
{
    for (var j = 0; j &lt; array_length_1d(stat); j++)
        values[i,j] = 0;
}

// Process buffs
for (var i = 0; i &lt; array_height_2d(buffs); i++)
{
    // Exclude expired buffs
    if (buffs[i,3] &gt; 1)
    {
        // Reduce time
        buffs[i,3]--;
        
        // Store value
        var val = buffs[i,2];
        var store_index = ((val &lt; 0) * 2) + buffs[i,1];
        values[store_index, buffs[i,0]] += val;
        
        // Add to new Buffs array
        var newIndex = array_height_2d(newBuffs);
        for (var j = 0; j &lt; array_length_2d(buffs, i); j++)
            newBuffs[newIndex, j] = buffs[i,j];
    }
}

// Apply values
for (var i = 0; i &lt; array_length_1d(stat); i++)
{
    var result = base_stat[i];
    for (j = 0; j &lt; array_height_2d(values); j++)
    {
        if (j == 1) // Positive Percent
        {
            if (values[j,i] != 0)
                result = result + (result * (values[j,i] / 100));
        }
        else if (j == 3) // Negative Percent
        {
            if (values[j,i] != 0)
            {
                var temp_result = result + (result * (values[j,i] / 100));
                if (temp_result &lt; 0) result = 0;
                else result = temp_result;
            }
        }
        else // Numbers
            result += values[j,i];
    }
    stat[i] = result;
}

// Write new buff array
buffs = false;
for (var i = 0; i &lt; array_height_2d(newBuffs); i++)
{
    for (var j = 0; j &lt; array_length_2d(newBuffs, i); j++)
        buffs[i,j] = newBuffs[i,j];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
